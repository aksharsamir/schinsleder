{"version":3,"file":"user-B9wxceAo.js","sources":["../../../core/data-resolver/user.js"],"sourcesContent":["import axios from \"axios\";\r\nimport config from \"@config\";\r\nimport { getCurrentLanguage, i18n } from \"@storefront/core/i18n\";\r\nimport { Logger } from \"@storefront/core/lib/logger\";\r\nimport graphql from \"@graphql\";\r\n\r\n/***\r\n *\r\n * merge guest wishlist to the logged in user\r\n *\r\n */\r\n\r\nexport async function mergeGuestWishlist(guestWishlistId, userWishlistId, store) {\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + store.getters[\"user/getUserToken\"],\r\n    Store: storeview,\r\n  };\r\n\r\n  const query =\r\n    \"mutation {mergeWishlists (source_wishlist_id: $sourceWishlistId, destination_wishlist_id: $destinationWishlistId) { items { product { name meta_title } } items_count id } }\";\r\n\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL,\r\n    method: \"POST\",\r\n    headers: headers,\r\n    data: {\r\n      query: query\r\n        .replace(\"$sourceWishlistId\", '\"' + guestWishlistId + '\"')\r\n        .replace(\"$destinationWishlistId\", '\"' + userWishlistId + '\"'),\r\n    },\r\n  }).catch((e) => {\r\n    Logger.error(\"mergeGuestWishlist\", \"data-resolver wishlist\", e)();\r\n    throw e;\r\n  });\r\n  if (retval.data.data.mergeGuestWishlist != null) {\r\n    return retval.data.data.mergeGuestWishlist;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Login as customer\r\n *\r\n * @param {string} username\r\n * @param {string} password\r\n * @param {object} store\r\n * @returns token or false\r\n */\r\nexport async function login(username, password, store) {\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + config.shop.accessToken,\r\n    Store: storeview,\r\n  };\r\n\r\n  const query =\r\n    \"mutation { generateCustomerToken(email: \" +\r\n    JSON.stringify(username) +\r\n    \", password: \" +\r\n    JSON.stringify(password) +\r\n    \") { token }}\";\r\n\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL,\r\n    method: \"POST\",\r\n    headers: headers,\r\n    data: { query: query },\r\n  }).catch((e) => {\r\n    Logger.error(\"login\", \"data-resolver user\", e)();\r\n    throw e;\r\n  });\r\n\r\n  if (retval.data.errors != null) {\r\n    retval.data.errors.forEach((element) => {\r\n      const msg = {\r\n        type: \"danger\",\r\n        title: \"login_error\",\r\n        text: element.message,\r\n      };\r\n      store.dispatch(\"messages/sendMessage\", { message: msg });\r\n    });\r\n  }\r\n  if (retval.data.data.generateCustomerToken?.token != null) {\r\n    return retval.data.data.generateCustomerToken.token;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * create customer account\r\n *\r\n * @param {object} account\r\n * @param {object} store\r\n * @returns true or false\r\n */\r\nexport async function createAccount(account, store) {\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + config.shop.accessToken,\r\n    Store: storeview,\r\n  };\r\n  if (typeof account.is_subscribed == \"undefined\") {\r\n    account.is_subscribed = false;\r\n  }\r\n\r\n  let query = \"mutation { createCustomerWithAddress( input: {\";\r\n  if (\"firstname\" in account) {\r\n    query = query + \" firstname: \" + JSON.stringify(account.firstname);\r\n  }\r\n  if (\"middlename\" in account) {\r\n    query = query + \" middlename: \" + JSON.stringify(account.middlename);\r\n  }\r\n  if (\"lastname\" in account) {\r\n    query = query + \" lastname: \" + JSON.stringify(account.lastname);\r\n  }\r\n  if (\"prefix\" in account) {\r\n    query = query + \" prefix: \" + JSON.stringify(account.prefix);\r\n  }\r\n  if (\"suffix\" in account) {\r\n    query = query + \" suffix: \" + JSON.stringify(account.suffix);\r\n  }\r\n\r\n  if (\"email\" in account) {\r\n    query = query + \" email: \" + JSON.stringify(account.email);\r\n  }\r\n  if (\"password\" in account) {\r\n    query = query + \" password: \" + JSON.stringify(account.password);\r\n  }\r\n  if (\"is_subscribed\" in account) {\r\n    query = query + \" is_subscribed: \" + account.is_subscribed;\r\n  }\r\n  if (\"gender\" in account) {\r\n    query = query + \" gender: \" + account.gender;\r\n  }\r\n\r\n  if (\"date_of_birth\" in account) {\r\n    query = query + \" date_of_birth: \" + JSON.stringify(account.date_of_birth);\r\n  }\r\n  if (\"taxvat\" in account) {\r\n    query = query + ' taxvat: \"' + account.taxvat.toUpperCase() + '\" ';\r\n  }\r\n  query = query + \" address: {\";\r\n\r\n  if (\"country_code\" in account.address) {\r\n    query = query + \" country_code: \" + account.address.country_code;\r\n  }\r\n  if (\"street\" in account.address) {\r\n    query = query + \" street: \" + JSON.stringify(account.address.street);\r\n  }\r\n  if (\"postcode\" in account.address) {\r\n    query = query + \" postcode: \" + JSON.stringify(account.address.postcode);\r\n  }\r\n  if (\"city\" in account.address) {\r\n    query = query + \" city: \" + JSON.stringify(account.address.city);\r\n  }\r\n  if (\"telephone\" in account.address) {\r\n    query = query + \" telephone: \" + JSON.stringify(account.address.telephone);\r\n  }\r\n  if (\"firstname\" in account) {\r\n    query = query + \" firstname: \" + JSON.stringify(account.firstname);\r\n  }\r\n  if (\"middlename\" in account) {\r\n    query = query + \" middlename: \" + JSON.stringify(account.middlename);\r\n  }\r\n  if (\"lastname\" in account) {\r\n    query = query + \" lastname: \" + JSON.stringify(account.lastname);\r\n  }\r\n  if (\"taxvat\" in account) {\r\n    query = query + ' vat_id: \"' + account.taxvat.toUpperCase() + '\" ';\r\n  }\r\n  // if (\"coc_number\" in account) {\r\n  //   query = query + \" coc: \" + JSON.stringify(account.coc_number);\r\n  // }\r\n  if (\"default_shipping\" in account.address) {\r\n    query = query + \" default_shipping: \" + account.address.default_shipping;\r\n  }\r\n  if (\"default_billing\" in account.address) {\r\n    query = query + \" default_billing: \" + account.address.default_billing;\r\n  }\r\n  if (\"company\" in account) {\r\n    query = query + \" company: \" + JSON.stringify(account.company);\r\n  }\r\n  if (\"vat_id\" in account) {\r\n    query = query + ' vat_id: \"' + account.taxvat.toUpperCase() + '\" ';\r\n  }\r\n  if (\"prefix\" in account) {\r\n    query = query + \" prefix: \" + JSON.stringify(account.prefix);\r\n  }\r\n  if (\"suffix\" in account) {\r\n    query = query + \" suffix: \" + JSON.stringify(account.suffix);\r\n  }\r\n  query = query + \"}\";\r\n  query = query + \" } ) { token customer { firstname lastname email is_subscribed } } }\";\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL,\r\n    method: \"POST\",\r\n    headers: headers,\r\n    data: { query: query },\r\n  }).catch((e) => {\r\n    Logger.error(\"createAccount\", \"data-resolver user\", e)();\r\n    throw e;\r\n  });\r\n  if (retval.data.errors != null) {\r\n    retval.data.errors.forEach((element) => {\r\n      const msg = {\r\n        type: \"danger\",\r\n        title: \"register_error\",\r\n        text: element.message,\r\n      };\r\n      store.dispatch(\"messages/sendMessage\", { message: msg });\r\n    });\r\n  }\r\n  if (retval.data.data.createCustomerWithAddress != null) {\r\n    return retval.data.data.createCustomerWithAddress.token;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * update customer account\r\n *\r\n * @param {object} account\r\n * @param {object} store\r\n * @returns true or false\r\n */\r\nexport async function updateAccount(account, store) {\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + store.getters[\"user/getUserToken\"],\r\n    Store: storeview,\r\n  };\r\n\r\n  let query = \"mutation { updateCustomer( input: {\";\r\n  if (\"firstname\" in account) {\r\n    query = query + \" firstname: \" + JSON.stringify(account.firstname);\r\n  }\r\n  if (\"middlename\" in account) {\r\n    query = query + \" middlename: \" + JSON.stringify(account.middlename);\r\n  }\r\n  if (\"lastname\" in account) {\r\n    query = query + \" lastname: \" + JSON.stringify(account.lastname);\r\n  }\r\n  if (\"prefix\" in account) {\r\n    query = query + \" prefix: \" + JSON.stringify(account.prefix);\r\n  }\r\n  if (\"suffix\" in account) {\r\n    query = query + \" suffix: \" + JSON.stringify(account.suffix);\r\n  }\r\n\r\n  if (\"email\" in account) {\r\n    query = query + \" email: \" + JSON.stringify(account.email);\r\n  }\r\n  if (\"password\" in account) {\r\n    query = query + \" password: \" + JSON.stringify(account.password);\r\n  }\r\n  if (\"is_subscribed\" in account) {\r\n    query = query + \" is_subscribed: \" + account.is_subscribed;\r\n  }\r\n  if (\"gender\" in account) {\r\n    query = query + \" gender: \" + account.gender;\r\n  }\r\n\r\n  if (\"date_of_birth\" in account) {\r\n    query = query + \" date_of_birth: \" + account.date_of_birth;\r\n  }\r\n  if (\"taxvat\" in account) {\r\n    query = query + ' taxvat: \"' + account.taxvat.toUpperCase() + '\" ';\r\n  }\r\n\r\n  query = query + \" } ) { customer { firstname lastname email is_subscribed } } }\";\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL,\r\n    method: \"POST\",\r\n    headers: headers,\r\n    data: { query: query },\r\n  }).catch((e) => {\r\n    Logger.error(\"updateAccount\", \"data-resolver user\", e)();\r\n    throw e;\r\n  });\r\n  if (retval.data.data && retval.data.data.updateCustomer != null) {\r\n    return true;\r\n  } else {\r\n    if (retval.data.errors != null) {\r\n      retval.data.errors.forEach((element) => {\r\n        if (store.getters[\"user/getIsLoggedIn\"] != false) {\r\n          if (element.extensions.category === \"graphql-authorization\") {\r\n            return store.dispatch(\"user/sessionExpired\", { store });\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * wishlist for not logged in\r\n *\r\n */\r\nexport async function createGuestWishlist() {\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    //Authorization: \"Bearer \" + config.shop.accessToken,\r\n    Store: storeview,\r\n  };\r\n\r\n  const query = \" mutation {createEmptyWishlist}\";\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL,\r\n    method: \"POST\",\r\n    headers: headers,\r\n    data: { query: query },\r\n  }).catch((e) => {\r\n    Logger.error(\"createGuestWishlist\", \"data-resolver wishlist\", e)();\r\n    throw e;\r\n  });\r\n  if (retval.data.data.createEmptyWishlist != null) {\r\n    return retval.data.data.createEmptyWishlist;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * add product to the wishlist\r\n * @param {string} sku\r\n * @param {string} parentSku\r\n * @param {object} store\r\n * @returns true or false\r\n */\r\nexport async function addProductToWishlist(sku, parentSku, store) {\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + store.getters[\"user/getUserToken\"],\r\n    Store: storeview,\r\n  };\r\n\r\n  let query = \"mutation { addProductsToWishlist( \";\r\n  query = query + 'wishlistId: \"' + store.getters[\"user/getWishlistId\"] + '\"';\r\n  query = query + ' wishlistItems: [{ sku: \"' + sku + '\"';\r\n  if (parentSku != null) {\r\n    query = query + ' parent_sku: \"' + parentSku + '\"';\r\n  }\r\n\r\n  query = query + \" quantity: 1}]\";\r\n\r\n  query =\r\n    query +\r\n    \" ) {user_errors { code message } wishlist { id items_count items { id qty product { url_key name sku id image { url } price_range { minimum_price { final_price { currency value } regular_price { currency value } } maximum_price { regular_price { currency value } } } } } } } }\";\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL,\r\n    method: \"POST\",\r\n    headers: headers,\r\n    data: { query: query },\r\n  }).catch((e) => {\r\n    Logger.error(\"addProductToWishlist\", \"data-resolver user\", e)();\r\n    throw e;\r\n  });\r\n  if (retval.data.data.addProductsToWishlist != null) {\r\n    if (retval.data.data.addProductsToWishlist.user_errors.length > 0) {\r\n      const msg = {\r\n        type: \"danger\",\r\n        title: \"Wensenlijst\",\r\n        text: retval.data.data.addProductsToWishlist.user_errors[0].message,\r\n      };\r\n      store.dispatch(\"messages/sendMessage\", { message: msg });\r\n    }\r\n\r\n    return retval;\r\n  } else {\r\n    if (retval.data.errors != null) {\r\n      retval.data.errors.forEach((element) => {\r\n        if (store.getters[\"user/getIsLoggedIn\"] != false) {\r\n          if (element.extensions.category === \"graphql-authorization\") {\r\n            return store.dispatch(\"user/sessionExpired\", { store });\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * remove product from wishlist\r\n * @param {integer} id\r\n * @param {object} store\r\n * @returns true or false\r\n */\r\nexport async function removeProductFromWishlist(id, store) {\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + store.getters[\"user/getUserToken\"],\r\n    Store: storeview,\r\n  };\r\n\r\n  let query = \"mutation { removeProductsFromWishlist( \";\r\n  query = query + 'wishlistId: \"' + store.getters[\"user/getWishlistId\"] + '\"';\r\n  query = query + \", wishlistItemsIds: [\" + id + \"]\";\r\n\r\n  query =\r\n    query +\r\n    \" ) {user_errors { code message } wishlist { id items_count items { id qty product { url_key name sku id image { url } price_range { minimum_price { final_price { currency value } regular_price { currency value } } maximum_price { regular_price { currency value } } } } } } } }\";\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL,\r\n    method: \"POST\",\r\n    headers: headers,\r\n    data: { query: query },\r\n  }).catch((e) => {\r\n    Logger.error(\"removeProductFromWishlist\", \"data-resolver user\", e)();\r\n    throw e;\r\n  });\r\n  if (retval.data.data && retval.data.data.removeProductsFromWishlist != null) {\r\n    return retval;\r\n  } else {\r\n    if (retval.data.errors != null) {\r\n      retval.data.errors.forEach((element) => {\r\n        if (store.getters[\"user/getIsLoggedIn\"] != false) {\r\n          if (element.extensions.category === \"graphql-authorization\") {\r\n            return store.dispatch(\"user/sessionExpired\", { store });\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * get current user\r\n * @param {object} store\r\n * @returns user object\r\n */\r\nexport async function getCurrent(store) {\r\n  const graphqlResolved = await graphql;\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + store.getters[\"user/getUserToken\"],\r\n    Store: storeview,\r\n  };\r\n\r\n  const query = graphqlResolved.queryFields.user;\r\n\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL + \"?query=\" + encodeURIComponent(query),\r\n    method: \"GET\",\r\n    headers: headers,\r\n  }).catch((e) => {\r\n    Logger.error(\"getCurrent\", \"data-resolver user\", e)();\r\n    throw e;\r\n  });\r\n  if (retval.data.data.customer != null) {\r\n    return retval.data.data.customer;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * add address to customer\r\n * @param {object} address\r\n * @param {object} store\r\n * @returns true or false\r\n */\r\nexport async function createAddress(address, store) {\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + store.getters[\"user/getUserToken\"],\r\n    Store: storeview,\r\n  };\r\n  let query = \"mutation { createCustomerAddress(input: { \";\r\n  if (\"country_code\" in address) {\r\n    query = query + \" country_code: \" + address.country_code + \" \";\r\n  }\r\n  if (\"street\" in address) {\r\n    query = query + \"street: \" + JSON.stringify(address.street) + \" \";\r\n  }\r\n  if (\"postcode\" in address) {\r\n    query = query + \"postcode: \" + JSON.stringify(address.postcode);\r\n  }\r\n  if (\"city\" in address) {\r\n    query = query + \"city: \" + JSON.stringify(address.city);\r\n  }\r\n  if (\"telephone\" in address) {\r\n    query = query + \"telephone: \" + JSON.stringify(address.telephone);\r\n  }\r\n  if (\"firstname\" in address) {\r\n    query = query + \"firstname: \" + JSON.stringify(address.firstname);\r\n  }\r\n  if (\"middlename\" in address) {\r\n    query = query + \"middlename: \" + JSON.stringify(address.middlename);\r\n  }\r\n  if (\"lastname\" in address) {\r\n    query = query + \"lastname: \" + JSON.stringify(address.lastname);\r\n  }\r\n  if (\"default_shipping\" in address) {\r\n    query = query + \"default_shipping: \" + address.default_shipping + \" \";\r\n  }\r\n  if (\"default_billing\" in address) {\r\n    query = query + \"default_billing: \" + address.default_billing + \" \";\r\n  }\r\n  if (\"company\" in address) {\r\n    query = query + \" company: \" + JSON.stringify(address.company);\r\n  }\r\n  if (\"vat_id\" in address) {\r\n    query = query + ' vat_id: \"' + address.vat_id.toUpperCase() + '\" ';\r\n  }\r\n  // if (\"coc\" in address) {\r\n  //   query = query + ' coc: \"' + address.coc + '\" ';\r\n  // }\r\n  if (\"prefix\" in address) {\r\n    query = query + \" prefix: \" + JSON.stringify(address.prefix);\r\n  }\r\n  if (\"suffix\" in address) {\r\n    query = query + \" suffix: \" + JSON.stringify(address.suffix);\r\n  }\r\n  query =\r\n    query +\r\n    \" }) { id region { region region_code } country_code street telephone postcode city default_shipping default_billing }}\";\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL,\r\n    method: \"POST\",\r\n    headers: headers,\r\n    data: { query: query },\r\n  }).catch((e) => {\r\n    Logger.error(\"createAddress\", \"data-resolver user\", e)();\r\n    throw e;\r\n  });\r\n  if (retval.data.data.createCustomerAddress != null) {\r\n    return true;\r\n  } else {\r\n    if (retval.data.errors != null) {\r\n      retval.data.errors.forEach((element) => {\r\n        if (store.getters[\"user/getIsLoggedIn\"] != false) {\r\n          if (element.extensions.category === \"graphql-authorization\") {\r\n            return store.dispatch(\"user/sessionExpired\", { store });\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * update address of customer\r\n * @param {integer} id\r\n * @param {object} address\r\n * @param {object} store\r\n * @returns true or false\r\n */\r\nexport async function updateAddress(id, address, store) {\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + store.getters[\"user/getUserToken\"],\r\n    Store: storeview,\r\n  };\r\n  let query = \"mutation { updateCustomerAddress(id:\" + id + \", input: { \";\r\n  if (\"country_code\" in address) {\r\n    query = query + \" country_code: \" + address.country_code + \" \";\r\n  }\r\n  if (\"street\" in address) {\r\n    query = query + \"street: \" + JSON.stringify(address.street) + \" \";\r\n  }\r\n  if (\"postcode\" in address) {\r\n    query = query + \" postcode: \" + JSON.stringify(address.postcode);\r\n  }\r\n  if (\"city\" in address) {\r\n    query = query + \" city: \" + JSON.stringify(address.city);\r\n  }\r\n  if (\"telephone\" in address) {\r\n    query = query + \" telephone: \" + JSON.stringify(address.telephone);\r\n  }\r\n  if (\"firstname\" in address) {\r\n    query = query + \" firstname: \" + JSON.stringify(address.firstname);\r\n  }\r\n  if (\"middlename\" in address) {\r\n    query = query + \" middlename: \" + JSON.stringify(address.middlename);\r\n  }\r\n  if (\"lastname\" in address) {\r\n    query = query + \" lastname: \" + JSON.stringify(address.lastname);\r\n  }\r\n  if (\"default_shipping\" in address) {\r\n    query = query + \"default_shipping: \" + address.default_shipping + \" \";\r\n  }\r\n  if (\"default_billing\" in address) {\r\n    query = query + \"default_billing: \" + address.default_billing + \" \";\r\n  }\r\n  if (\"company\" in address) {\r\n    query = query + \" company: \" + JSON.stringify(address.company);\r\n  }\r\n  if (\"vat_id\" in address) {\r\n    query = query + ' vat_id: \"' + address.vat_id.toUpperCase() + '\" ';\r\n  }\r\n  // if (\"coc\" in address) {\r\n  //   query = query + ' coc: \"' + address.coc + '\" ';\r\n  // }\r\n  if (\"prefix\" in address) {\r\n    query = query + \" prefix: \" + JSON.stringify(address.prefix);\r\n  }\r\n  if (\"suffix\" in address) {\r\n    query = query + \" suffix: \" + JSON.stringify(address.suffix);\r\n  }\r\n\r\n  query =\r\n    query +\r\n    \" }) { id firstname middlename lastname company prefix suffix region { region region_code } country_code street telephone postcode city default_shipping default_billing }}\";\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL,\r\n    method: \"POST\",\r\n    headers: headers,\r\n    data: { query: query },\r\n  }).catch((e) => {\r\n    Logger.error(\"updateAddress\", \"data-resolver user\", e)();\r\n    throw e;\r\n  });\r\n  if (retval.data.data.updateCustomerAddress != null) {\r\n    return true;\r\n  } else {\r\n    if (retval.data.errors != null) {\r\n      retval.data.errors.forEach((element) => {\r\n        if (store.getters[\"user/getIsLoggedIn\"] != false) {\r\n          if (element.extensions.category === \"graphql-authorization\") {\r\n            return store.dispatch(\"user/sessionExpired\", { store });\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * change password\r\n *\r\n * @param {string} currentPassword\r\n * @param {string} newPassword\r\n * @param {object} store\r\n * @returns true or false\r\n */\r\nexport async function changePassword(currentPassword, newPassword, store) {\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + store.getters[\"user/getUserToken\"],\r\n    Store: storeview,\r\n  };\r\n  const query =\r\n    \"mutation { changeCustomerPassword(currentPassword: \" +\r\n    JSON.stringify(currentPassword) +\r\n    \" newPassword: \" +\r\n    JSON.stringify(newPassword) +\r\n    \"){id email} }\";\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL,\r\n    method: \"POST\",\r\n    headers: headers,\r\n    data: { query: query },\r\n  }).catch((e) => {\r\n    Logger.error(\"changePassword\", \"data-resolver user\", e)();\r\n    throw e;\r\n  });\r\n  if (retval.data.data.changeCustomerPassword != null) {\r\n    return true;\r\n  } else {\r\n    if (retval.data.errors != null) {\r\n      retval.data.errors.forEach((element) => {\r\n        if (store.getters[\"user/getIsLoggedIn\"] != false) {\r\n          if (element.extensions.category === \"graphql-authorization\") {\r\n            return store.dispatch(\"user/sessionExpired\", { store });\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * delete address from customer\r\n *\r\n * @param {integer} id\r\n * @param {object} store\r\n * @returns true or false\r\n */\r\nexport async function deleteAddress(id, store) {\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + store.getters[\"user/getUserToken\"],\r\n    Store: storeview,\r\n  };\r\n  const query = \"mutation { deleteCustomerAddress(id: \" + id + \") }\";\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL,\r\n    method: \"POST\",\r\n    headers: headers,\r\n    data: { query: query },\r\n  }).catch((e) => {\r\n    Logger.error(\"deleteAddress\", \"data-resolver user\", e)();\r\n    throw e;\r\n  });\r\n  if (retval.data.data.deleteCustomerAddress != null) {\r\n    return retval.data.data.deleteCustomerAddress;\r\n  } else {\r\n    if (retval.data.errors != null) {\r\n      retval.data.errors.forEach((element) => {\r\n        if (store.getters[\"user/getIsLoggedIn\"] != false) {\r\n          if (element.extensions.category === \"graphql-authorization\") {\r\n            return store.dispatch(\"user/sessionExpired\", { store });\r\n          }\r\n        }\r\n        const msg = {\r\n          type: \"danger\",\r\n          text: element.message,\r\n        };\r\n        store.dispatch(\"messages/sendMessage\", { message: msg });\r\n      });\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * newsletter signup\r\n *\r\n * @param {string} email\r\n * @param {object} store\r\n * @returns email address or false\r\n */\r\nexport async function newsletterSignup(email, store) {\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  let headers = {};\r\n  if (store.getters[\"user/getIsLoggedIn\"] != false) {\r\n    headers = {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: \"Bearer \" + store.getters[\"user/getUserToken\"],\r\n      Store: storeview,\r\n    };\r\n  } else {\r\n    headers = {\r\n      \"Content-Type\": \"application/json\",\r\n      // Authorization: \"Bearer \" + config.shop.consumerKey,\r\n      Store: storeview,\r\n    };\r\n  }\r\n\r\n  // const query =\r\n  //   'mutation { addNewsletterSubscriber(input: {email: \"' +\r\n  //   email +\r\n  //   '\"}) {email}}';\r\n\r\n  const query =\r\n    \"mutation { subscribeEmailToNewsletter( email: \" + JSON.stringify(email) + \" ) { status } }\";\r\n\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL,\r\n    method: \"POST\",\r\n    headers: headers,\r\n    data: { query: query },\r\n  }).catch((e) => {\r\n    Logger.error(\"newsletterSignup\", \"data-resolver user\", e)();\r\n    throw e;\r\n  });\r\n  if (retval.data.errors != null) {\r\n    retval.data.errors.forEach((element) => {\r\n      if (store.getters[\"user/getIsLoggedIn\"] != false) {\r\n        if (element.extensions.category === \"graphql-authorization\") {\r\n          return store.dispatch(\"user/sessionExpired\", { store });\r\n        }\r\n      }\r\n      const msg = {\r\n        type: \"danger\",\r\n        title: i18n.global.t(\"newsletter_error\"),\r\n        text: element.message,\r\n      };\r\n      store.dispatch(\"messages/sendMessage\", { message: msg });\r\n    });\r\n  }\r\n  if (retval.data.data.subscribeEmailToNewsletter != null) {\r\n    return retval.data.data.subscribeEmailToNewsletter.status;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * get countries\r\n *\r\n * @returns array of countries\r\n */\r\nexport async function getCountries() {\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + config.shop.accessToken,\r\n    Store: storeview,\r\n  };\r\n\r\n  const query =\r\n    \"query { countries { id two_letter_abbreviation three_letter_abbreviation full_name_locale full_name_english available_regions { id code name } } }\";\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL + \"?query=\" + encodeURIComponent(query),\r\n    method: \"GET\",\r\n    headers: headers,\r\n  }).catch((e) => {\r\n    Logger.error(\"getCountries\", \"data-resolver user\", e)();\r\n    throw e;\r\n  });\r\n  if (retval.data.data.countries != null) {\r\n    return retval.data.data.countries;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * validate dutch postcode\r\n *\r\n * @param {string} postcode\r\n * @param {integer} number\r\n * @returns short address object or false\r\n */\r\nexport async function validatePostcode(postcode, number) {\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    \"Client-id\": config.postcode_validation.client_id,\r\n    Secret: config.postcode_validation.client_secret,\r\n  };\r\n\r\n  const retval = await axios({\r\n    url:\r\n      config.postcode_validation.url +\r\n      \"?postcode=\" +\r\n      encodeURIComponent(postcode) +\r\n      \"&number=\" +\r\n      encodeURIComponent(number),\r\n    method: \"GET\",\r\n    headers: headers,\r\n  }).catch((e) => {\r\n    Logger.error(\"validatePostcode\", \"data-resolver user\", e)();\r\n    return [];\r\n  });\r\n  if (retval.data != null) {\r\n    return retval.data;\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} vat\r\n * @returns true or false\r\n */\r\nexport async function validateVatNumber(vat) {\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    \"Client-id\": config.vat_validation.client_id,\r\n    Secret: config.vat_validation.client_secret,\r\n  };\r\n\r\n  vat = vat.toUpperCase();\r\n  let formatBe = /^BE\\d{10}$/;\r\n  let formatNl = /^NL\\d{9}B\\d{2}$/;\r\n  let formatDe = /^DE\\d{9}$/;\r\n\r\n  let formatValid = false;\r\n  let country_code = \"\";\r\n  switch (vat.slice(0, 2)) {\r\n    case \"NL\":\r\n      formatValid = formatNl.test(vat);\r\n      country_code = \"NL\";\r\n      break;\r\n    case \"DE\":\r\n      formatValid = formatDe.test(vat);\r\n      country_code = \"DE\";\r\n      break;\r\n    case \"BE\":\r\n      formatValid = formatBe.test(vat);\r\n      country_code = \"BE\";\r\n      break;\r\n    default:\r\n      formatValid = /^[A-Z]{2}.{8,12}$/.test(vat); //A valid VAT number is between 8-12 characters long excluding country code\r\n      country_code = vat.slice(0, 2);\r\n  }\r\n\r\n  if (!formatValid) {\r\n    return false;\r\n  }\r\n  const retval = await axios({\r\n    url:\r\n      config.vat_validation.url +\r\n      \"?country_code=\" +\r\n      country_code +\r\n      \"&vat_id=\" +\r\n      vat +\r\n      \"&requester_country_code=\" +\r\n      config.vat_validation.requester_country_code +\r\n      \"&requester_vat_id=\" +\r\n      config.vat_validation.requester_vat_id,\r\n    method: \"GET\",\r\n    headers: headers,\r\n  }).catch((e) => {\r\n    Logger.error(\"validateVatNumber\", \"data-resolver user\", e)();\r\n    throw e;\r\n  });\r\n  if (retval.data != null) {\r\n    return retval.data;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * check if email is available\r\n *\r\n * @param {string} email\r\n * @returns true or false\r\n */\r\nexport async function checkEmailExist(email) {\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + config.shop.accessToken,\r\n    Store: storeview,\r\n  };\r\n\r\n  const query = 'query { isEmailAvailable(email: \"' + email + '\"){is_email_available} }';\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL + \"?query=\" + encodeURIComponent(query),\r\n    method: \"GET\",\r\n    headers: headers,\r\n  }).catch((e) => {\r\n    Logger.error(\"checkEmailExist\", \"data-resolver user\", e)();\r\n    throw e;\r\n  });\r\n  if (retval.data.data.isEmailAvailable != null) {\r\n    return retval.data.data.isEmailAvailable.is_email_available;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @returns get all past orders of customer\r\n */\r\nexport async function getMyOrders({ page, perPage, search }, store) {\r\n  const graphqlResolved = await graphql;\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + store.getters[\"user/getUserToken\"],\r\n    Store: storeview,\r\n  };\r\n\r\n  const query = graphqlResolved.queryFields.myOrders\r\n    .replace(\"$currentPage\", page)\r\n    .replace(\"$pageSize\", perPage)\r\n    .replace(\"$searchTxt\", search ? 'match: \"' + search + '\"' : \"\");\r\n\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL,\r\n    method: \"POST\",\r\n    headers: headers,\r\n    data: { query: query },\r\n  }).catch((e) => {\r\n    Logger.error(\"customerOrders\", \"data-resolver user\", e)();\r\n    throw e;\r\n  });\r\n  if (retval.data.data.customer.orders != null) {\r\n    return retval.data.data.customer.orders;\r\n  } else {\r\n    if (retval.data.errors != null) {\r\n      retval.data.errors.forEach((element) => {\r\n        if (store.getters[\"user/getIsLoggedIn\"] != false) {\r\n          if (element.extensions.category === \"graphql-authorization\") {\r\n            return store.dispatch(\"user/sessionExpired\", { store });\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * forgot password function\r\n *\r\n * @param {string} email\r\n * @param {object} store\r\n * @returns object\r\n */\r\nexport async function forgotPassword(email, store) {\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + config.shop.accessToken,\r\n    Store: storeview,\r\n  };\r\n\r\n  const query = \"mutation { requestPasswordResetEmail(email: \" + JSON.stringify(email) + \")}\";\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL,\r\n    method: \"POST\",\r\n    headers: headers,\r\n    data: { query: query },\r\n  }).catch((e) => {\r\n    Logger.error(\"forgotPassword\", \"data-resolver user\", e)();\r\n    throw e;\r\n  });\r\n  if (retval.data.errors != null) {\r\n    retval.data.errors.forEach((element) => {\r\n      const msg = {\r\n        type: \"danger\",\r\n        title: i18n.global.t(\"password_reset_error\"),\r\n        text: i18n.global.t(element.message),\r\n      };\r\n      store.dispatch(\"messages/sendMessage\", { message: msg });\r\n    });\r\n  }\r\n  return retval.data.data.requestPasswordResetEmail;\r\n}\r\n\r\n/**\r\n * reset password\r\n *\r\n * @param {string} email\r\n * @param {string} resetPasswordToken\r\n * @param {string} newPassword\r\n * @returns true or false\r\n */\r\nexport async function resetPassword(email, resetPasswordToken, newPassword) {\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + config.shop.accessToken,\r\n    Store: storeview,\r\n  };\r\n\r\n  const query =\r\n    \"mutation { resetPassword(email: \" +\r\n    JSON.stringify(email) +\r\n    \" resetPasswordToken: \" +\r\n    JSON.stringify(resetPasswordToken) +\r\n    \" newPassword: \" +\r\n    JSON.stringify(newPassword) +\r\n    \" )}\";\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL,\r\n    method: \"POST\",\r\n    headers: headers,\r\n    data: { query: query },\r\n  }).catch((e) => {\r\n    Logger.error(\"forgotPassword\", \"data-resolver user\", e)();\r\n    throw e;\r\n  });\r\n  /*\r\n  if (retval.data.errors != null) {\r\n    retval.data.errors.forEach((element) => {\r\n      const msg = {\r\n        type: \"danger\",\r\n        title: \"user\",\r\n        text: element.message,\r\n      };\r\n      //store.dispatch(\"messages/sendMessage\", { message: msg });\r\n    });\r\n  }\r\n  */\r\n  if (retval.data.data.resetPassword == null) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * add description to a wishlist item\r\n */\r\n\r\nexport async function addWishlistItemDescription({ wishItemId, description, qty }, store) {\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + store.getters[\"user/getUserToken\"],\r\n    Store: storeview,\r\n  };\r\n\r\n  let query = \"mutation { updateProductsInWishlist( \";\r\n  query = query + 'wishlistId: \"' + store.getters[\"user/getWishlistId\"] + '\"';\r\n  query =\r\n    query +\r\n    \" wishlistItems: [{ wishlist_item_id: \" +\r\n    wishItemId +\r\n    ' description: \"' +\r\n    description +\r\n    '\" quantity: ' +\r\n    qty +\r\n    \"}]\";\r\n\r\n  query =\r\n    query +\r\n    \" ) {user_errors { code message } wishlist { id items_count items { id qty product { url_key name sku id price_range { minimum_price { regular_price { currency value } } maximum_price { regular_price { currency value } } } } } } } }\";\r\n\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL,\r\n    method: \"POST\",\r\n    headers: headers,\r\n    data: { query: query },\r\n  }).catch((e) => {\r\n    Logger.error(\"updateWishItemDesc\", \"AccountWishlist.vue\", e)();\r\n    throw e;\r\n  });\r\n\r\n  if (retval.data.data.updateProductsInWishlist != null) {\r\n    return true;\r\n  } else {\r\n    if (retval.data.errors != null) {\r\n      retval.data.errors.forEach((element) => {\r\n        const msg = {\r\n          type: \"danger\",\r\n          title: \"\",\r\n          text: element.message,\r\n        };\r\n        store.dispatch(\"messages/sendMessage\", { message: msg });\r\n      });\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * share wishlist\r\n */\r\n\r\nexport async function handleShareWishlist({ name, emails, message }, store) {\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + store.getters[\"user/getUserToken\"],\r\n    Store: storeview,\r\n  };\r\n\r\n  let query = \"mutation { shareWishlist( input: {\";\r\n  query += \" wishlist_id: \" + store.getters[\"user/getWishlistId\"];\r\n  query += ' customer_name: \"' + name + '\" recipients: [';\r\n\r\n  for (const email of emails) {\r\n    query += ' { email: \"' + email + '\" }';\r\n  }\r\n\r\n  query += ' ] message: \"' + message + '\"';\r\n  query += \" } ) { errors { message } wishlist_id recipients { email } } }\";\r\n\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL,\r\n    method: \"POST\",\r\n    headers: headers,\r\n    data: { query: query },\r\n  }).catch((e) => {\r\n    Logger.error(\"updateWishItemDesc\", \"AccountWishlist.vue\", e)();\r\n    throw e;\r\n  });\r\n\r\n  if (retval.data.data.shareWishlist != null) {\r\n    return retval.data.data.shareWishlist;\r\n  } else {\r\n    if (retval.data.errors != null) {\r\n      retval.data.errors.forEach((element) => {\r\n        const msg = {\r\n          type: \"danger\",\r\n          title: \"\",\r\n          text: element.message,\r\n        };\r\n        store.dispatch(\"messages/sendMessage\", { message: msg });\r\n      });\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * get shared wishlist\r\n */\r\n\r\nexport async function getSharedWishlistBySharingCode(sharing_code) {\r\n  const graphqlResolved = await graphql;\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + config.shop.accessToken,\r\n    Store: storeview,\r\n  };\r\n\r\n  const query =\r\n    '{ sharedWishlist(code: \"' +\r\n    sharing_code +\r\n    '\") { items_v2 { page_info { current_page page_size total_pages } ' +\r\n    graphqlResolved.queryFields.wishlist +\r\n    \" } items_count } }\";\r\n\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL + \"?query=\" + encodeURI(query),\r\n    method: \"GET\",\r\n    headers: headers,\r\n  }).catch((e) => {\r\n    Logger.error(\"getSharedWishlist\", \"account.js\", e)();\r\n    throw e;\r\n  });\r\n\r\n  return retval.data.data.sharedWishlist;\r\n}\r\n/**\r\n * create customer account\r\n *\r\n * @param { object } account\r\n * @param { object } store\r\n * @returns string|boolean\r\n */\r\nexport async function createAccountFromOrder(account, store) {\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + config.shop.accessToken,\r\n    Store: storeview,\r\n  };\r\n\r\n  let query =\r\n    \"mutation {  createAccountFromOrder(input: { order_id: \" +\r\n    account.order_id +\r\n    ' email:\"' +\r\n    account.email +\r\n    '\" password:\"' +\r\n    account.password +\r\n    '\"';\r\n  query = query + \" } ) { token customer { firstname lastname email is_subscribed } } }\";\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL,\r\n    method: \"POST\",\r\n    headers: headers,\r\n    data: { query: query },\r\n  }).catch((e) => {\r\n    Logger.error(\"createAccount\", \"data-resolver user\", e)();\r\n    throw e;\r\n  });\r\n  if (retval.data.errors != null) {\r\n    retval.data.errors.forEach((element) => {\r\n      const msg = {\r\n        type: \"danger\",\r\n        title: \"register_error\",\r\n        text: element.message,\r\n      };\r\n      store.dispatch(\"messages/sendMessage\", { message: msg });\r\n    });\r\n  }\r\n  if (retval.data.data.createAccountFromOrder != null) {\r\n    return retval.data.data.createAccountFromOrder.token;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function getReviews(store) {\r\n  const lang = getCurrentLanguage();\r\n  const storelang = config.languages[lang];\r\n  const storeview = storelang[\"storeview\"];\r\n  const graphqlResolved = await graphql;\r\n\r\n  const headers = {\r\n    \"Content-Type\": \"application/json\",\r\n    Authorization: \"Bearer \" + store.getters[\"user/getUserToken\"],\r\n    Store: storeview,\r\n  };\r\n\r\n  const query = graphqlResolved.queryFields.customerReviews;\r\n\r\n  const retval = await axios({\r\n    url: config.shop.graphQLURL,\r\n    method: \"POST\",\r\n    headers: headers,\r\n    data: { query: query },\r\n  }).catch((e) => {\r\n    Logger.error(\"customerReviews\", \"data-resolver user\", e)();\r\n    throw e;\r\n  });\r\n  if (retval.data.data && retval.data.data.customer.reviews != null) {\r\n    return retval.data.data.customer.reviews;\r\n  } else {\r\n    if (retval.data.errors != null) {\r\n      retval.data.errors.forEach((element) => {\r\n        if (store.getters[\"user/getIsLoggedIn\"] != false) {\r\n          if (element.extensions.category === \"graphql-authorization\") {\r\n            return store.dispatch(\"user/sessionExpired\");\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n"],"names":["config","Logger","graphql"],"mappings":"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"}