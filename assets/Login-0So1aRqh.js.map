{"version":3,"file":"Login-0So1aRqh.js","sources":["../../../src/esf_thehague_schinsleder/core/views/Login.vue"],"sourcesContent":["<template>\r\n    <AppLayout wrapperClass=\"login\" v-if=\"isClient\">\r\n        <Breadcrumbs />\r\n        <section class=\"ps-md-20 p-15 pt-0 \">\r\n            <h1 class=\"title\"> {{ t(\"login\") }}</h1>\r\n            <div class=\"login-component\">\r\n                <div class=\"d-flex flex-column flex-md-row justify-content-between\">\r\n                    <BForm @submit.prevent=\"onLoginFormSubmit\" novalidate>\r\n\r\n                        <BFormInput id=\"email\" v-model=\"form.email\" :state=\"loginValidation.emailState\"\r\n                            :placeholder=\"t('email')\" @blur=\"validateEmail\" type=\"email\" required=\"\"\r\n                            aria-describedby=\"email-feedback\">\r\n                        </BFormInput>\r\n                        <BFormInvalidFeedback id=\"email-feedback\">\r\n                            {{ loginValidation.emailError }}\r\n                        </BFormInvalidFeedback>\r\n\r\n                        <BFormInput id=\"password\" v-model=\"form.password\" type=\"password\" required=\"\"\r\n                            :placeholder=\"t('password')\" :state=\"loginValidation.passwordState\" @blur=\"validatePassword\"\r\n                            aria-describedby=\"password-feedback\">\r\n                        </BFormInput>\r\n                        <BFormInvalidFeedback id=\"password-feedback\">\r\n                            {{ loginValidation.passwordError }}\r\n                        </BFormInvalidFeedback>\r\n\r\n                        <BButton type=\"submit\" variant=\"secondary\" class=\"ml-20 form-submit-btn\">\r\n                            {{ $t(\"login\") }}\r\n                        </BButton>\r\n\r\n                        <div class=\"mt-10\">\r\n                            <router-link to=\"/forgot-password\" class=\"font-weight-normal d-block\">\r\n                                {{ $t(\"password_forgot\") }}\r\n                            </router-link>\r\n                            <router-link :to=\"{name: 'create-account'}\" class=\"font-weight-normal d-block\">\r\n                                {{ $t(\"become_a_customer\") }}\r\n                            </router-link>\r\n                        </div>\r\n                    </BForm>\r\n                </div>\r\n            </div>\r\n\r\n        </section>\r\n    </AppLayout>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, watch, onMounted } from \"vue\";\r\nimport { useRouter } from \"vue-router\";\r\nimport { useStore } from \"vuex\";\r\nimport AppLayout from \"@/esf_thehague_schinsleder/core/components/AppLayout.vue\";\r\nimport Breadcrumbs from \"@/esf_thehague_schinsleder/core/components/Breadcrumbs.vue\";\r\nimport { useI18n } from \"vue-i18n\";\r\nimport { useHead } from \"@unhead/vue\";\r\nimport { useLogin } from \"@storefront/core/composable/login\";\r\n\r\nconst { login } = useLogin();\r\nconst { t } = useI18n();\r\nconst router = useRouter();\r\nconst store = useStore();\r\nconst isClient = ref(false);\r\n// Reactive form and validation objects\r\nconst form = ref({\r\n    email: \"\",\r\n    password: \"\",\r\n});\r\n\r\nconst loginValidation = ref({\r\n    emailState: null,\r\n    emailError: \"\",\r\n    passwordState: null,\r\n    passwordError: \"\",\r\n});\r\n\r\nconst emailReg = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; // Sample regex for email validation\r\n\r\n// Method to handle form submission\r\nconst onLoginFormSubmit = () => {\r\n    let formValid = true;\r\n    if (loginValidation.value.emailState !== true) {\r\n        validateEmail();\r\n        if (loginValidation.value.emailState !== true) {\r\n            formValid = false;\r\n        }\r\n    }\r\n\r\n    if (loginValidation.value.passwordState !== true) {\r\n        validatePassword();\r\n        if (loginValidation.value.passwordState !== true) {\r\n            formValid = false;\r\n        }\r\n    }\r\n\r\n    if (formValid) {\r\n        login(form.value);\r\n    }\r\n};\r\n\r\n// Email validation\r\nconst validateEmail = () => {\r\n    if (form.value.email.length === 0) {\r\n        loginValidation.value.emailState = false;\r\n        loginValidation.value.emailError = t(\"email_is_required_field\");\r\n        return false;\r\n    }\r\n    if (!emailReg.test(form.value.email)) {\r\n        loginValidation.value.emailState = false;\r\n        loginValidation.value.emailError = t(\"email_is_invalid_field\");\r\n        return false;\r\n    }\r\n    loginValidation.value.emailState = true;\r\n    return true;\r\n};\r\n\r\n// Password validation\r\nconst validatePassword = () => {\r\n    if (form.value.password.length === 0) {\r\n        loginValidation.value.passwordState = false;\r\n        loginValidation.value.passwordError = t(\"password_is_required_field\");\r\n        return false;\r\n    }\r\n    loginValidation.value.passwordState = true;\r\n    return true;\r\n};\r\n\r\n// Set up meta information using useHead\r\nuseHead({\r\n    title: () => t(\"login\"),\r\n    meta: [\r\n        { name: \"title\", content: () => t(\"login\") },\r\n        { name: \"keywords\", content: () => t(\"login\") },\r\n        { name: \"description\", content: () => t(\"login\") },\r\n    ],\r\n});\r\n\r\nconst isLoggedIn = computed(() => store.getters[\"user/getIsLoggedIn\"]);\r\n\r\nwatch(isLoggedIn, (newVal) => {\r\n    if (newVal) {\r\n        router.push({ name: \"account\" });\r\n    }\r\n});\r\n\r\nonMounted(() => {\r\n    const bcrumb = { current: t(\"login\"), routes: [] };\r\n    store.commit(\"breadcrumbs/set\", bcrumb);\r\n\r\n    isClient.value = true;\r\n});\r\n</script>\r\n<style scoped>\r\n@import \"@/base/core/components/login/login.scss\";\r\n</style>"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA,UAAM,EAAE,MAAK,IAAK;AAClB,UAAM,EAAE,EAAC,IAAK;AACd,UAAM,SAAS,UAAS;AACxB,UAAM,QAAQ,SAAQ;AACtB,UAAM,WAAW,IAAI,KAAK;AAE1B,UAAM,OAAO,IAAI;AAAA,MACb,OAAO;AAAA,MACP,UAAU;AAAA,IACd,CAAC;AAED,UAAM,kBAAkB,IAAI;AAAA,MACxB,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,eAAe;AAAA,MACf,eAAe;AAAA,IACnB,CAAC;AAED,UAAM,WAAW;AAGjB,UAAM,oBAAoB,MAAM;AAC5B,UAAI,YAAY;AAChB,UAAI,gBAAgB,MAAM,eAAe,MAAM;AAC3C;AACA,YAAI,gBAAgB,MAAM,eAAe,MAAM;AAC3C,sBAAY;AAAA,QACf;AAAA,MACJ;AAED,UAAI,gBAAgB,MAAM,kBAAkB,MAAM;AAC9C;AACA,YAAI,gBAAgB,MAAM,kBAAkB,MAAM;AAC9C,sBAAY;AAAA,QACf;AAAA,MACJ;AAED,UAAI,WAAW;AACX,cAAM,KAAK,KAAK;AAAA,MACnB;AAAA,IACL;AAGA,UAAM,gBAAgB,MAAM;AACxB,UAAI,KAAK,MAAM,MAAM,WAAW,GAAG;AAC/B,wBAAgB,MAAM,aAAa;AACnC,wBAAgB,MAAM,aAAa,EAAE,yBAAyB;AAC9D,eAAO;AAAA,MACV;AACD,UAAI,CAAC,SAAS,KAAK,KAAK,MAAM,KAAK,GAAG;AAClC,wBAAgB,MAAM,aAAa;AACnC,wBAAgB,MAAM,aAAa,EAAE,wBAAwB;AAC7D,eAAO;AAAA,MACV;AACD,sBAAgB,MAAM,aAAa;AACnC,aAAO;AAAA,IACX;AAGA,UAAM,mBAAmB,MAAM;AAC3B,UAAI,KAAK,MAAM,SAAS,WAAW,GAAG;AAClC,wBAAgB,MAAM,gBAAgB;AACtC,wBAAgB,MAAM,gBAAgB,EAAE,4BAA4B;AACpE,eAAO;AAAA,MACV;AACD,sBAAgB,MAAM,gBAAgB;AACtC,aAAO;AAAA,IACX;AAGA,YAAQ;AAAA,MACJ,OAAO,MAAM,EAAE,OAAO;AAAA,MACtB,MAAM;AAAA,QACF,EAAE,MAAM,SAAS,SAAS,MAAM,EAAE,OAAO,EAAG;AAAA,QAC5C,EAAE,MAAM,YAAY,SAAS,MAAM,EAAE,OAAO,EAAG;AAAA,QAC/C,EAAE,MAAM,eAAe,SAAS,MAAM,EAAE,OAAO,EAAG;AAAA,MACrD;AAAA,IACL,CAAC;AAED,UAAM,aAAa,SAAS,MAAM,MAAM,QAAQ,oBAAoB,CAAC;AAErE,UAAM,YAAY,CAAC,WAAW;AAC1B,UAAI,QAAQ;AACR,eAAO,KAAK,EAAE,MAAM,UAAW,CAAA;AAAA,MAClC;AAAA,IACL,CAAC;AAED,cAAU,MAAM;AACZ,YAAM,SAAS,EAAE,SAAS,EAAE,OAAO,GAAG,QAAQ,CAAA;AAC9C,YAAM,OAAO,mBAAmB,MAAM;AAEtC,eAAS,QAAQ;AAAA,IACrB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}